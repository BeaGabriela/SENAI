Data acess object - DAO
FPOO - Programação orientada a objeto;
Escabilidade - Expande tranquilamente.

Projeto estruturado - Resolve o problema mas não é escalavél, ou seja, não se pode expandir.

"\\" -- Dentro de uma String as barras duplas significam que não é um comando, e sim, faz apenas parte da String;

"\" - Uma instrução;
"\""

banco de dado  semi-estruturado - csv, txt;
|
|
 -> estruturado - Oracle;

Programação 
- estrutural: 
-POO: Programacao orientada a objeto
-MVC - modelo, visao, controle
- DAO - Dados, acess, object
- CRUD: CREATE, READ, UPDATE, DELETE

escabilidade: Aplicar alterações em um código, aumentando suas funcionalidades sem a necessidade de alterar todas as partes.
Programação em blocos;

	//Programação estrutural:
	Oriebtada a funções: 
"Procedimentos	
"Eventos" : Algo que acontece no computador, um clique;
"Visual" : Objetos prontos e soltar na tela;

GUI(Gaphies user Interface)
MVC(Model, view, control) padrao de objetos.;
DAO(DATA ACESS object) Persistencia;



	
thwors- não da mensagem de erro, apenas ignora;
try-catch = da mensagem de erro; 


tratamento de erro - evitar que o prgrama trave. Trata o programa. (Try-catch);

arvore binaria - caminhos possiveis que um fluxograma poe seguir;

em string usa-se .equals();

extends - Herda

interface - classse que não tem atributo, apenas metodos.

UML - Linguagem de modelagem unificada(Unifield modeling language);

1--Diagram de caso de uso - representa o usuario com bonecos, e as elipse para representar umma ação, uma fncionalidade(features)(tem de haver um verbo, no infinitivo);

cilindro represneta um banco de dados;

flechas pontilhada para frente (--->)(include) - obrigatorio;
flechas pontilhada para tras(<---)(extends)- Opcional;

2--Prototipo: Interface com o usuario, um esboço; Desenhar a tela para ter uma leve noção de como vai ficar;

3 -- Diagrma de classes. 
	diagrama de produção, mas  proximo da real, de como vai ficar o programa.
nivel 1- classes;
nivel 2- privado ou publico, static.

simples - uma linha simples;
flecha com ---|> - Interface.
flecha com -|> - herança.
flecha com > - Associação
flecha com losango vazio - ela não depdende de outra classe;
flecha com lozango prenchido - Ele depdnde de outra classe;

direção da flecha diz de quem ela "precisa".

1..* - cardinalidade;
2..*

A documentação é feita antes, durante e depois.

redents - opciocal;
include - obrigatorio.

essencial - não funciona sme ele.
importante - é necesario.
desejavel - não tao importante.

RF - requisito funcional.

draw.io - Desenhar;

Regras em banco de daods- não se deve armazenar resultados baseados em contas.

um para muitos;

tupla - uma coleção de objetos ordenados. - Separra dem duas tabelas; A primeira tabela é sempre menos, e a segunda é maor, usano informações da primeira tabela.


um para um;
um para N;
n para um;






